#include <iostream>
#include "naive-bayes.cpp"

const long R = 50;
const long M = 2;
const long N = 2;

int main() {
  NaiveBayes model = NaiveBayes(N, M);

  long type[] = {1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0,
                 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,
                 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1};

  double trainData[R][M] = {
      {1.64349405, 0.6240167},     {-0.70645035, -0.64391332},
      {0.92141506, -9.98499137},   {-1.78833491, -9.83575141},
      {0.01337416, -0.02986773},   {0.42097483, -1.19381863},
      {-0.52577983, -11.34940749}, {-2.23658448, -11.26289379},
      {-3.97025533, -10.74409641}, {0.36427483, -1.4920455},
      {0.9338942, -0.804547},      {-2.06723502, -1.22416886},
      {-1.21779287, -11.15836353}, {-1.6836874, -6.13442518},
      {1.29956153, 0.81649221},    {1.56604891, -0.44413899},
      {-2.40190838, -9.46793749},  {-0.65485886, 1.08317844},
      {-0.52731615, -10.74779592}, {-1.84360609, -9.59318151},
      {0.22044687, -10.05311414},  {2.73553179, -0.71443508},
      {-1.3087977, -7.71897353},   {-3.4119278, -9.71171816},
      {2.75354681, -4.80895693},   {-1.75036425, -8.32495776},
      {1.7796942, -0.19063278},    {-0.47151448, -10.37571491},
      {-2.52380489, -9.34991004},  {-2.86703029, -10.84498679},
      {-0.72443515, -7.44202457},  {-0.45292089, -6.04316334},
      {1.31742357, -4.08147073},   {-4.93225332, -9.31238561},
      {1.56395751, -1.61925505},   {0.70904566, -1.40938015},
      {0.30024154, -0.76721941},   {0.0412306, -0.53095778},
      {-4.08223794, -6.88469836},  {3.04410269, 0.5332763},
      {0.38741115, -3.37033015},   {2.23030407, 0.57876723},
      {-2.99592463, -1.43073108},  {-0.36309079, -9.40951948},
      {-0.89524628, -10.96464394}, {2.03592897, -4.34375197},
      {-2.5972638, -9.71612662},   {-1.6136897, 0.26768378},
      {-1.28008731, -8.66794651},  {-0.02326381, -3.45271069}};

  std::vector<double> data[M];

  for (int i = 0; i < M; i++) {
    for (int j = 0; j < R; j++) {
      data[i].push_back(trainData[j][i]);
    }
  }

  model.addData(R, data, type);
  model.train();

  double acc = 0;

  for (int i = 0; i < R; i++) {
    if (model.get(trainData[i]) == type[i]) acc += 1.0;
  }

  acc /= R;

  std::cout << 100.0 * acc;

  return 0;
}
